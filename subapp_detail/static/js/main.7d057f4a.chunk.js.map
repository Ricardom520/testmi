{"version":3,"sources":["shared/actions.js","logo.svg","App.js","index.js"],"names":["emptyAction","console","warn","actions","onGlobalStateChange","setGlobalState","this","log","App","useEffect","state","className","src","logo","alt","href","target","rel","initApp","container","ReactDOM","render","StrictMode","querySelector","document","getElementById","bootstrap","a","mount","props","setActions","unmount","unmountComponentAtNode","update","window","__POWERED_BY_QIANKUN__"],"mappings":"6YAAA,SAASA,IACPC,QAAQC,KAAK,mC,IAmCAC,EAFC,I,iDA5BdA,QAAU,CACRC,oBAAqBJ,EACrBK,eAAgBL,G,uDAMPG,GACTG,KAAKH,QAAWA,I,4CAMY,IAAD,IAE3B,OADA,EAAAF,SAAQM,IAAR,oBACO,EAAAD,KAAKH,SAAQC,oBAAb,qB,uCAMgB,IAAD,EACtB,OAAO,EAAAE,KAAKH,SAAQE,eAAb,uB,MC9BI,G,MAAA,IAA0B,kCCgC1BG,G,MA3BH,WAOV,OANAC,qBAAU,WACRN,EAAQC,qBAAoB,SAAAM,GAC1BT,QAAQM,IAAIG,MACX,KACF,IAGD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,2BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,gCCbFC,EAAU,SAAAC,GACdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFH,EAAYA,EAAUI,cAAc,SAAWC,SAASC,eAAe,UASpE,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,sEACC1B,QAAQM,IAAI,yBADb,4C,sBAOA,SAAeqB,EAAtB,kC,4CAAO,WAAqBC,GAArB,eAAAF,EAAA,6DACGR,EAAcU,EAAdV,UACRlB,QAAQM,IAAIsB,GACZ1B,EAAQ2B,WAAWD,GAHd,SAICX,EAAQC,GAJT,4C,sBAUA,SAAeY,IAAtB,+B,4CAAO,sBAAAJ,EAAA,sEACCP,IAASY,uBAAuBR,SAASC,eAAe,gBADzD,4C,sBAOA,SAAeQ,EAAtB,kC,4CAAO,WAAsBJ,GAAtB,SAAAF,EAAA,sEACC1B,QAAQM,IAAI,eAAgBsB,GAD7B,4C,sBA5BFK,OAAOC,wBACVjB,M","file":"static/js/main.7d057f4a.chunk.js","sourcesContent":["function emptyAction() {\r\n  console.warn(\"Current excute action is empty!\");\r\n}\r\n\r\nclass Actions {\r\n  // 默认值为Action\r\n  actions = {\r\n    onGlobalStateChange: emptyAction,\r\n    setGlobalState: emptyAction\r\n  };\r\n\r\n  /**\r\n   * 设置actions\r\n   */\r\n  setActions(actions) {\r\n    this.actions  = actions;\r\n  }\r\n\r\n  /**\r\n   * 映射\r\n   */\r\n  onGlobalStateChange(...args) {\r\n    console.log(...args)\r\n    return this.actions.onGlobalStateChange(...args);\r\n  }\r\n\r\n  /**\r\n   * 映射\r\n   */\r\n  setGlobalState(...args) {\r\n    return this.actions.setGlobalState(...args);\r\n  }\r\n}\r\n\r\nconst actions = new Actions();\r\n\r\nexport default actions;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect } from 'react';\nimport actions from './shared/actions';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => {\n  useEffect(() => {\n    actions.onGlobalStateChange(state => {\n      console.log(state)\n    }, true)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save1 to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport actions from './shared/actions';\nimport './index.css';\nimport App from './App';\n\nconst initApp = container => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    container ? container.querySelector('#root') : document.getElementById('root')\n  );\n}\n\n// 全局变量来判断环境，独立运行时\nif (!window.__POWERED_BY_QIANKUN__) {\n  initApp()\n}\n\nexport async function bootstrap() {\n  await console.log('react app bootstraped');\n}\n\n/**\n * 应用每次进入都会调用mount方法，通常我们在这里触发应用的渲染方法\n */\nexport async function mount(props) {\n  const { container } = props;\n  console.log(props)\n  actions.setActions(props)\n  await initApp(container)\n}\n\n/**\n * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例\n */\nexport async function unmount() {\n  await ReactDOM.unmountComponentAtNode(document.getElementById('react15Root'));\n}\n\n/**\n * 可选生命周期钩子，仅适用 loadMicroApp 方式加载微应用时生效\n */\nexport async function update(props) {\n  await console.log('update props', props);\n}"],"sourceRoot":""}